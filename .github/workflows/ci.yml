name: Go CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.23.4

      - name: Install dependencies
        run: go mod tidy

      - name: Build the project
        run: go build -v ./...

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.23.4

      - name: Run tests
        run: go test -v ./...

  measure:
    name: Measure Code Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.23.4

      - name: Run tests with coverage
        run: |
          go test -coverprofile=coverage.out ./...
          go tool cover -func=coverage.out

  document:
  name: Document with Godoc
  runs-on: ubuntu-latest
  steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.23.4

    - name: Generate documentation with Godoc
      run: |
        godoc -http=:6060 &  # Lance le serveur godoc en arrière-plan
        sleep 10  # Attendre quelques secondes que le serveur démarre
        curl http://localhost:6060/pkg/ > godoc.html  # Récupère la documentation générée
        mv godoc.html $GITHUB_WORKSPACE/godoc.html  # Déplace la documentation dans le bon répertoire
    - name: Upload generated documentation
      uses: actions/upload-artifact@v3
      with:
        name: godoc-html
        path: godoc.html
